#include "GPUParticle.h"
#include<cassert>
#include <d3dcompiler.h>

#pragma comment(lib, "d3dcompiler.lib")

using namespace DirectX;

//静的メンバ変数の実態
std::unique_ptr<GPUParticle::Common> GPUParticle::common;

void GPUParticle::Common::InitializeGraphicsPipeline(DirectXCommon* dxCommon)
{
	HRESULT result = S_FALSE;
	ComPtr<ID3DBlob>vsBlob;//頂点シェーダーオブジェクト
	ComPtr<ID3DBlob>gsBlob;//ジオメトリシェーダーオブジェクト
	ComPtr<ID3DBlob>psBlob;//ピクセルシェーダオブジェクト
	ComPtr<ID3DBlob> errorBlob;//エラーオブジェクト
	ComPtr<ID3DBlob>FireGSBlob;//ファイヤーパーティクル用ジオメトリシェーダーオブジェクト
	ComPtr<ID3DBlob>HitParticleGSBlob;//衝突パーティクル用ジオメトリシェーダーオブジェクト

		//頂点シェーダの読み込みとコンパイル
	result = D3DCompileFromFile(
		L"shaders/ParticleVS.hlsl",//シェーダファイル名
		nullptr,
		D3D_COMPILE_STANDARD_FILE_INCLUDE,//インクルード可能にする
		"VSmain", "vs_5_0",//エントリーポイント名、シェーダーモデル指定
		D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION,//デバッグ用設定
		0,
		&vsBlob, &errorBlob);

	if (FAILED(result)) {
		//errorBlobからエラー内容をstring型にコピー
		std::string errstr;
		errstr.resize(errorBlob->GetBufferSize());
		std::copy_n((char*)errorBlob->GetBufferPointer(),
			errorBlob->GetBufferSize(),
			errstr.begin());
		errstr += "￥n";
		//エラー内容を出力ウィンドウに表示
		OutputDebugStringA(errstr.c_str());
		exit(1);
	}
	//ピクセルシェーダの読み込みとコンパイル
	result = D3DCompileFromFile(
		L"shaders/ParticlePS.hlsl",//シェーダファイル名
		nullptr,
		D3D_COMPILE_STANDARD_FILE_INCLUDE,//インクルード可能にする
		"PSmain", "ps_5_0",//エントリーポイント名、シェーダーモデル指定
		D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION,//デバッグ用設定
		0,
		&psBlob, &errorBlob);

	if (FAILED(result)) {
		//errorBlobからエラー内容をstring型にコピー
		std::string errstr;
		errstr.resize(errorBlob->GetBufferSize());
		std::copy_n((char*)errorBlob->GetBufferPointer(),
			errorBlob->GetBufferSize(),
			errstr.begin());
		errstr += "￥n";
		//エラー内容を出力ウィンドウに表示
		OutputDebugStringA(errstr.c_str());
		exit(1);
	}
	//ジオメトリシェーダの読み込みとコンパイル
	result = D3DCompileFromFile(
		L"shaders/ParticleGS.hlsl",//シェーダファイル名
		nullptr,
		D3D_COMPILE_STANDARD_FILE_INCLUDE,//インクルード可能にする
		"main", "gs_5_0",//エントリーポイント名、シェーダーモデル指定
		D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION,//デバッグ用設定
		0,
		&gsBlob, &errorBlob);

	if (FAILED(result)) {
		//errorBlobからエラー内容をstring型にコピー
		std::string errstr;
		errstr.resize(errorBlob->GetBufferSize());
		std::copy_n((char*)errorBlob->GetBufferPointer(),
			errorBlob->GetBufferSize(),
			errstr.begin());
		errstr += "￥n";
		//エラー内容を出力ウィンドウに表示
		OutputDebugStringA(errstr.c_str());
		exit(1);
	}

	D3D12_INPUT_ELEMENT_DESC inputLayout[] = {
		{
			"POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0,
			D3D12_APPEND_ALIGNED_ELEMENT,
			D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0
		},
		{
			"NORMAL",0,DXGI_FORMAT_R32G32B32_FLOAT,0,
			D3D12_APPEND_ALIGNED_ELEMENT,
			D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA,0
		},
		{ // uv 座標(1 行で書いたほうが見やすい)
			"TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0,
			D3D12_APPEND_ALIGNED_ELEMENT,
			D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0
		},
	};

	//噴出用ジオメトリシェーダの読み込みとコンパイル
	result = D3DCompileFromFile(
		L"shaders/ShootEnemyParticleGS.hlsl",//シェーダファイル名
		nullptr,
		D3D_COMPILE_STANDARD_FILE_INCLUDE,//インクルード可能にする
		"main", "gs_5_0",//エントリーポイント名、シェーダーモデル指定
		D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION,//デバッグ用設定
		0,
		&FireGSBlob, &errorBlob);

	if (FAILED(result)) {
		//errorBlobからエラー内容をstring型にコピー
		std::string errstr;
		errstr.resize(errorBlob->GetBufferSize());
		std::copy_n((char*)errorBlob->GetBufferPointer(),
			errorBlob->GetBufferSize(),
			errstr.begin());
		errstr += "￥n";
		//エラー内容を出力ウィンドウに表示
		OutputDebugStringA(errstr.c_str());
		exit(1);
	}
	//噴出用ジオメトリシェーダの読み込みとコンパイル
	result = D3DCompileFromFile(
		L"shaders/HitParticleGS.hlsl",//シェーダファイル名
		nullptr,
		D3D_COMPILE_STANDARD_FILE_INCLUDE,//インクルード可能にする
		"main", "gs_5_0",//エントリーポイント名、シェーダーモデル指定
		D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION,//デバッグ用設定
		0,
		&HitParticleGSBlob, &errorBlob);

	if (FAILED(result)) {
		//errorBlobからエラー内容をstring型にコピー
		std::string errstr;
		errstr.resize(errorBlob->GetBufferSize());
		std::copy_n((char*)errorBlob->GetBufferPointer(),
			errorBlob->GetBufferSize(),
			errstr.begin());
		errstr += "￥n";
		//エラー内容を出力ウィンドウに表示
		OutputDebugStringA(errstr.c_str());
		exit(1);
	}

	//グラフィックスパイプラインの流れを設定
	D3D12_GRAPHICS_PIPELINE_STATE_DESC gpipeline{};
	gpipeline.VS = CD3DX12_SHADER_BYTECODE(vsBlob.Get());
	gpipeline.GS = CD3DX12_SHADER_BYTECODE(gsBlob.Get());
	gpipeline.PS = CD3DX12_SHADER_BYTECODE(psBlob.Get());
	//サンプルマスク
	gpipeline.SampleMask = D3D12_DEFAULT_SAMPLE_MASK;//標準設定
	//ラスタライザステート
	gpipeline.RasterizerState = CD3DX12_RASTERIZER_DESC(D3D12_DEFAULT);
	//デプスステンシルステート
	gpipeline.DepthStencilState = CD3DX12_DEPTH_STENCIL_DESC(D3D12_DEFAULT);

	//レンダーターゲットのブレンド設定
	D3D12_RENDER_TARGET_BLEND_DESC blenddesc{};
	blenddesc.RenderTargetWriteMask = D3D12_COLOR_WRITE_ENABLE_ALL;//標準設定
	blenddesc.BlendEnable = true;//ブレンドを有効にするフラグ
	blenddesc.BlendOpAlpha = D3D12_BLEND_OP_ADD;//アルファ値のブレンド方法
	blenddesc.SrcBlendAlpha = D3D12_BLEND_ONE;//ソースアルファの割合
	blenddesc.DestBlendAlpha = D3D12_BLEND_ZERO;//デスティネーションアルファの割合
	blenddesc.BlendOp = D3D12_BLEND_OP_ADD; //加算
	blenddesc.SrcBlend = D3D12_BLEND_SRC_ALPHA; //ソースのアルファ値
	blenddesc.DestBlend = D3D12_BLEND_INV_SRC_ALPHA; //1.0f-ソースのアルファ値

	//ブレンドステートに設定する
	gpipeline.BlendState.RenderTarget[0] = blenddesc;
	gpipeline.DSVFormat = DXGI_FORMAT_D32_FLOAT;//深度値フォーマット
	gpipeline.InputLayout.pInputElementDescs = inputLayout;
	gpipeline.InputLayout.NumElements = _countof(inputLayout);
	gpipeline.PrimitiveTopologyType = D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT;
	gpipeline.NumRenderTargets = 1;//描画対象は1つ
	gpipeline.RTVFormats[0] = DXGI_FORMAT_R8G8B8A8_UNORM;//0〜255指定のRGBA
	gpipeline.SampleDesc.Count = 1;//1ピクセルにつき1回サンプリング

	//デスクリプタテーブルの設定
	CD3DX12_DESCRIPTOR_RANGE  descRangeSRV;
	descRangeSRV.Init(D3D12_DESCRIPTOR_RANGE_TYPE_SRV, 1, 0);

	//ルートパラメータの設定
	CD3DX12_ROOT_PARAMETER rootparams[3] = {};
	rootparams[0].InitAsConstantBufferView(0);
	rootparams[1].InitAsDescriptorTable(1, &descRangeSRV, D3D12_SHADER_VISIBILITY_ALL);
	rootparams[2].InitAsConstantBufferView(1, 0, D3D12_SHADER_VISIBILITY_ALL);

	//スタティックサンプラー
	CD3DX12_STATIC_SAMPLER_DESC samplerDesc = CD3DX12_STATIC_SAMPLER_DESC(0);
	//ルートシグネチャの設定
	CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC rootSignatureDesc;
	rootSignatureDesc.Init_1_0(_countof(rootparams), rootparams, 1, &samplerDesc,
		D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT);

	ComPtr<ID3DBlob>rootSigBlob;
	result = D3DX12SerializeVersionedRootSignature(&rootSignatureDesc,
		D3D_ROOT_SIGNATURE_VERSION_1_0, &rootSigBlob, &errorBlob);
	assert(SUCCEEDED(result));
	//ルートシグネチャ生成
	result = dxCommon->GetDevice()->CreateRootSignature(0, rootSigBlob->GetBufferPointer(), rootSigBlob->GetBufferSize(), IID_PPV_ARGS(&rootsignature));
	assert(SUCCEEDED(result));

	//パイプラインにルートシグネチャをセット
	gpipeline.pRootSignature = rootsignature.Get();
	//噴出パーティクル用シェーダー
	D3D12_GRAPHICS_PIPELINE_STATE_DESC gpipeline2 = gpipeline;
	gpipeline2.PrimitiveTopologyType = D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE;
	gpipeline2.GS = CD3DX12_SHADER_BYTECODE(FireGSBlob.Get());
	//衝突パーティクル用シェーダー
	D3D12_GRAPHICS_PIPELINE_STATE_DESC gpipeline3 = gpipeline;
	gpipeline3.PrimitiveTopologyType = D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE;
	gpipeline3.GS = CD3DX12_SHADER_BYTECODE(HitParticleGSBlob.Get());

#pragma endregion
	//パイプラインステートにセット
	result = dxCommon->GetDevice()->CreateGraphicsPipelineState(&gpipeline, IID_PPV_ARGS(&pipelinestate[ParticleMode::POINTPARTICLE]));
	assert(SUCCEEDED(result));
	result = dxCommon->GetDevice()->CreateGraphicsPipelineState(&gpipeline2, IID_PPV_ARGS(&pipelinestate[ParticleMode::SHOOTENEMY]));
	assert(SUCCEEDED(result));
	result = dxCommon->GetDevice()->CreateGraphicsPipelineState(&gpipeline3, IID_PPV_ARGS(&pipelinestate[ParticleMode::HITPARTICLE]));
	assert(SUCCEEDED(result));
}

void GPUParticle::Common::InitializeCamera()
{

}
void GPUParticle::StaticInitialize(DirectXCommon* dxCommon, Camera* camera)
{
	common = std::make_unique<Common>();

	common->dxCommon = dxCommon;
	//グラフィクスパイプラインの初期化
	common->InitializeGraphicsPipeline(dxCommon);
	//カメラの初期化
	common->InitializeCamera();

	common->camera = camera;
}
GPUParticle::GPUParticle()
{
}
GPUParticle::~GPUParticle()
{

}
void GPUParticle::Initialize(Model* model)
{
	this->model = model;

	HRESULT result = S_FALSE;

	//定数バッファビューの生成
	result = common->dxCommon->GetDevice()->CreateCommittedResource(
		&CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_UPLOAD), // ヒープ設定
		D3D12_HEAP_FLAG_NONE,
		&CD3DX12_RESOURCE_DESC::Buffer((sizeof(ConstBufferData) + 0xff) & ~0xff),
		D3D12_RESOURCE_STATE_GENERIC_READ,
		nullptr,
		IID_PPV_ARGS(&constBuff));
	assert(SUCCEEDED(result));

	//デスクリプタ1つ分のサイズ
	UINT descHandleIncrementSize = common->dxCommon->GetDevice()->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV);

}
void GPUParticle::Update()
{
	HRESULT result;
	XMMATRIX matScale, matRot, matTrans; // 移動、回転、拡縮の行列

	//スケール、回転、平行行列の計算
	matScale = XMMatrixScaling(scale.x, scale.y, scale.z);
	matRot = XMMatrixIdentity();
	matRot *= XMMatrixRotationZ(XMConvertToRadians(rotation.z));
	matRot *= XMMatrixRotationX(XMConvertToRadians(rotation.x));
	matRot *= XMMatrixRotationY(XMConvertToRadians(rotation.y));
	matTrans = XMMatrixTranslation(position.x, position.y, position.z); //平行移動行列を座標から再計算

	//ワールド行列の合成
	matWorld = XMMatrixIdentity(); //変形をリセット
	matWorld *= matScale; // ワールド行列にスケーリングを反映
	matWorld *= matRot; // ワールド行列に回転を反映
	matWorld *= matTrans; // ワールド行列に平行移動を反映

	//親オブジェクトがあれば
	if (parent != nullptr)
	{	//親オブジェクトのワールド行列をかける
		matWorld *= parent->matWorld;
	}

	//カメラの行列取得
	const XMMATRIX& matView = common->camera->getMatView();
	const XMMATRIX& matProjection = common->camera->getMatProjection();
	const XMFLOAT3& cameraPos = common->camera->GetEye();

	//定数バッファへのデータ転送
	ConstBufferData* constMap = nullptr;
	result = constBuff->Map(0, nullptr, (void**)&constMap);
	constMap->color = XMFLOAT4(color.x, color.y, color.z, 1);//RGBA
	constMap->viewproj = matView * matProjection;
	constMap->world = matWorld;
	constMap->cameraPos = cameraPos;
	constMap->time = time;
	constMap->maxCount = maxCount;
	constBuff->Unmap(0, nullptr);
}

void GPUParticle::Draw(ID3D12GraphicsCommandList* cmdList, ParticleMode mode, int instanceIndex)
{
	//モデル描画なので頂点のみのパーティクルに未対応
	if (mode == ParticleMode::POINTPARTICLE) { assert(0); }
#pragma region 共通描画コマンド

	//パイプラインステートの設定
	cmdList->SetPipelineState(common->pipelinestate[mode].Get());
	//ルートシグネチャの設定コマンド
	cmdList->SetGraphicsRootSignature(common->rootsignature.Get());
	//プリミティブ形状を設定
	cmdList->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);

#pragma endregion

#pragma region 個別の描画コマンド

	// 定数バッファビューをセット
	cmdList->SetGraphicsRootConstantBufferView(0, constBuff->GetGPUVirtualAddress());
	//モデルの描画
	model->Draw(cmdList, instanceIndex);

#pragma endregion

}
void GPUParticle::PointDraw(ID3D12GraphicsCommandList* cmdList, ParticleMode mode, int instanceIndex)
{
#pragma region 共通描画コマンド
	//パイプラインステートの設定
	cmdList->SetPipelineState(common->pipelinestate[mode].Get());
	//ルートシグネチャの設定コマンド
	cmdList->SetGraphicsRootSignature(common->rootsignature.Get());
	//プリミティブ形状を設定
	cmdList->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_POINTLIST);

#pragma endregion

#pragma region 個別の描画コマンド

	// 定数バッファビューをセット
	cmdList->SetGraphicsRootConstantBufferView(0, constBuff->GetGPUVirtualAddress());
	//モデルの描画
	model->Draw(cmdList, instanceIndex);

#pragma endregion
}
